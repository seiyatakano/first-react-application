{"version":3,"sources":["contexts/AppContext.js","utils.js","components/EventForm.js","actions/index.js","components/Event.js","components/Events.js","components/OperationLog.js","components/OperationLogs.js","reducers/events.js","reducers/operationLogs.js","reducers/index.js","components/App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","timeCurrentIso8601","Date","toISOString","EventForm","_useContext","useContext","state","dispatch","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","body","setBody","unCreatable","react_default","a","createElement","Fragment","className","htmlFor","id","value","onChange","e","target","onClick","preventDefault","type","description","operatedAt","disabled","window","confirm","events","length","operationLogs","Event","_ref","event","concat","Events","map","index","components_Event","key","OperationLog","operationLog","OperationLogs","components_OperationLog","arguments","undefined","action","toConsumableArray","objectSpread2","filter","combineReducers","APP_KEY","App","appState","localStorage","getItem","initialState","JSON","parse","_useReducer","useReducer","reducer","_useReducer2","useEffect","setItem","stringify","contexts_AppContext","Provider","components_EventForm","components_Events","components_OperationLogs","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83b0ba02.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nconst AppContext = createContext()\n//Contextを作成する数は、作成するapplicationの規模による。軽量のapplicationはContext一つでも事足りる。\n//データを提供(Provider)したいコンポーネントとデータを受け取りたい(Consumer)コンポーネントの両者にimportして使用する。\n//Providerの方はapplicationのトップレベルになる。ラップしてデータを提供できる\n//ConsumerはProviderにラップされている場所なら、どこからでもアクセスできる\nexport default AppContext","export const timeCurrentIso8601 = () => {\n    return (new Date()).toISOString()\n}","import React, { useState, useContext } from 'react'\n\nimport {\n  DELETE_ALL_EVENTS, \n  CREATE_EVENT,\n  ADD_OPERATION_LOG,\n  DELETE_ALL_OPERATION_LOGS\n} from '../actions'\n\nimport AppContext from '../contexts/AppContext'\nimport { timeCurrentIso8601} from '../utils.js'\n\nconst EventForm = () => {\n    const {state, dispatch} = useContext(AppContext)\n    const [title, setTitle] = useState('')\n    const [body, setBody] = useState('')\n    //状態繊維をさせたいタイミングでdispatch(司令役)にactionのtypeを渡す形で呼び出す。\n    //switch文の中で判別して実行してくれる\n    const deleteAllEvents = e => {\n      e.preventDefault()\n      const result = window.confirm('全てのイベントを本当に削除してもよろしいですか？')\n      if(result){\n        dispatch({ type:DELETE_ALL_EVENTS })\n        dispatch({\n          type:ADD_OPERATION_LOG,\n          description:'全てのイベントを削除しました',\n          operatedAt: timeCurrentIso8601()\n        })\n      }\n    }\n    const addEvent = e => {\n      //画面全体をリロードする挙動をpreventできる\n      e.preventDefault()\n      dispatch({\n        type: CREATE_EVENT,\n        title,\n        body\n      })\n\n      dispatch({\n        type: ADD_OPERATION_LOG,\n        description: 'イベントを作成しました。',\n        operatedAt: timeCurrentIso8601()\n      })\n\n      setTitle('')\n      setBody('')\n    }\n    const deleteAllOperationLogs = e => {\n      e.preventDefault()\n      const result = window.confirm('全てのログを本当に削除しても良いですか？')\n      if(result){\n        dispatch({\n          type: DELETE_ALL_OPERATION_LOGS\n        })\n      }\n    }\n    //コンポーネントのボタンの活性化を管理する変数\n    const unCreatable = title === '' || body === ''\n    return (\n        <React.Fragment>\n            <h4>イベント作成フォーム</h4>\n            <form>\n                <div className='form-group'>\n                <label htmlFor='formEventTitle'>タイトル</label>\n                <input className='form-control' id='formEventTitle' value={title} onChange={e => setTitle(e.target.value)}/>\n                </div>\n                <div className='form-group'>\n                <label htmlFor='formEventBody'>ボディー</label>\n                <textarea className='form-control' id='formEventBody' value={body} onChange={e => setBody(e.target.value)}/>\n                </div>\n                <button className='btn btn-primary' onClick={addEvent} disabled={unCreatable}>イベントを作成する</button>\n                <button className='btn btn-danger' onClick={deleteAllEvents} disabled={state.events.length === 0}>全てのイベントを削除する</button>\n                <button className='btn btn-danger' onClick={deleteAllOperationLogs} disabled={state.operationLogs.length === 0}>全ての操作ログを削除する</button>\n            </form>\n        </React.Fragment>\n    )\n}\n\nexport default EventForm","export const CREATE_EVENT = 'CREATE_EVENT'\nexport const DELETE_ALL_EVENTS = 'DELETE_ALL_EVENTS'\nexport const DELETE_EVENT = 'DELETE_EVENT'\n\nexport const ADD_OPERATION_LOG = 'ADD_OPERATION_LOG'\nexport const DELETE_ALL_OPERATION_LOGS = 'DELETE_ALL_OPERATION_LOGS'","import React, {useContext} from 'react'\nimport { \n    DELETE_EVENT,\n    ADD_OPERAION_LOG,\n    ADD_OPERATION_LOG\n} from '../actions'\n\nimport AppContext from '../contexts/AppContext'\nimport { timeCurrentIso8601 } from '../utils'\n\nconst Event = ({event}) => {\n    const { dispatch } = useContext(AppContext)\n    const handleClickDeleteButton = () => {\n        const result = window.confirm(`イベント(id=${event.id})を本当に削除してよろしいですか？`)\n        if(result){\n            dispatch({\n                type: DELETE_EVENT, id: event.id, \n            })\n            dispatch({\n                type: ADD_OPERATION_LOG,\n                description: `イベント(id=${event.id})を削除しました`,\n                operatedAt: timeCurrentIso8601()\n            })\n        }\n    }\n    return (<tr>\n    <td>{event.id}</td>\n    <td>{event.title}</td>\n    <td>{event.body}</td>\n    <td><button type='button' className='btn btn-danger' onClick={handleClickDeleteButton}>削除</button></td>\n    </tr>)\n}\n\nexport default Event\n\n//アクションのタイプは定数がお好き\n//actionを一元管理するスキーマがactions","import React, { useContext } from 'react'\nimport Event from './Event'\n\nimport AppContext from '../contexts/AppContext'\n\nconst Events = () => {\n\n    const { state } = useContext(AppContext)\n\n    return(\n        <React.Fragment>\n            <h4>イベント一覧</h4>\n            <table className='table table-hover'>\n            <thead>\n                <tr>\n                <th>ID</th>\n                <th>タイトル</th>\n                <th>ボディー</th>\n                <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {state.events.map((event, index) => (<Event key={index} event={event} />))}\n            </tbody>\n            </table>\n        </React.Fragment>\n    )\n}\n\nexport default Events","import React from 'react'\n\nconst OperationLog = ({operationLog}) => {\n    return(\n        <tr>\n            <td>{operationLog.description}</td>\n            <td>{operationLog.operatedAt}</td>\n        </tr>\n    )\n}\n\nexport default OperationLog\n","import React, { useContext } from 'react'\n\nimport OperationLog from './OperationLog'\n\nimport AppContext from '../contexts/AppContext'\n\n\n\nconst OperationLogs = () => {\n    const {state} = useContext(AppContext)\n    return (\n        <React.Fragment>\n            <h4>操作ログ一覧</h4>\n            <table className=\"table table-hover\">\n                <thead>\n                    <tr>\n                        <th>内容</th>\n                        <th>日時</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        state.operationLogs.map((operationLog, index) => {\n                            return(\n                                <OperationLog key={index} operationLog={operationLog} />\n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n        </React.Fragment>\n    )\n}\n\nexport default OperationLogs","import {\n    CREATE_EVENT,\n    DELETE_EVENT,\n    DELETE_ALL_EVENTS\n} from '../actions'\n\nconst events =  (state = [], action) => {\n    switch(action.type){\n        case CREATE_EVENT:\n            const event = {title: action.title, body: action.body}\n            const length = state.length\n            const id = (length === 0) ? 1 : state[length - 1].id + 1\n            return [...state, {id: id, ...event}]\n        case DELETE_EVENT:\n            return state.filter(event => event.id !== action.id)\n        case DELETE_ALL_EVENTS:\n            return []\n        default:\n            //action.typeのどこにも引っかからない時、そのままの状態を返す。\n            return state\n    }\n}\n\nexport default events\n\n//reducerを分割すれば、情報遷移表が複数存在することに対応するので、対応できるんじゃね？という発想\n//combineReducerとは、複数のreducerを一つのreducerとして統合する","import {\n    ADD_OPERATION_LOG,\n    DELETE_ALL_OPERATION_LOGS\n} from '../actions'\n\nconst operationLogs = (state = [], action) => {\n    switch (action.type){\n        case ADD_OPERATION_LOG:\n            const operationLog = {\n                description: action.description,\n                operatedAt: action.operatedAt\n            }\n            return [operationLog, ...state]\n        case DELETE_ALL_OPERATION_LOGS:\n            return []\n        default:\n            return state\n    }\n}\n\nexport default operationLogs","import { combineReducers } from 'redux'\n\nimport events from './events'\nimport operationLogs from './operationLogs'\n\nexport default combineReducers({\n    events,\n    operationLogs\n})","import React, { useEffect, useReducer }from 'react'\n// jqueryに依存しているため、単体のimportだとエラーが生じる\n// import 'bootstrap'\n//bootstrapテクノロジーのcss部分のみを抜き出したモジュールを取り入れる。\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport EventForm from './EventForm'\nimport Events from './Events'\nimport OperationLogs from './OperationLogs'\nimport reducer from '../reducers'\n\nimport AppContext from '../contexts/AppContext'\n\nconst APP_KEY = 'appWithRedux'\n\nfunction App() {\n  const appState = localStorage.getItem(APP_KEY)\n  const initialState = appState ? JSON.parse(appState) : {\n    events: [],\n    operationLogs: []\n  }\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    //localstrageには、文字列のみが保存できるので、json.stringifyを使用してstateの各情報を文字列にする\n    localStorage.setItem(APP_KEY, JSON.stringify(state))\n  }, [state])\n  return (\n    <AppContext.Provider value={{state, dispatch}}>\n      <div className='container-fluid'>\n        <EventForm />\n        <Events />\n        <OperationLogs />\n      </div>\n    </AppContext.Provider>\n  )\n}\nexport default App\n//子コンポーネントにはpropsという機能を通じて、共通のインスタンスを変更・保持している。\n//バケツリレーをやっている感じ->俗に言うPropDrilling問題と呼ばれる\n//データの共有をpropsインターフェースだけに頼ると、大規模な開発が難しくなる。\n//reduxのproviderを使用すれば、解決\n//reduxの導入が面倒\n//ただデータを共有したいだけなのに、ルーティン的に行わなければいけない操作が多い。\n//useContextを使用すれば、より簡単な方法で解決することが可能になる。\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}